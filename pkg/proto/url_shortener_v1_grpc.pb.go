// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/url_shortener_v1.proto

package pb_url_shortener_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLShortenerV1_Ping_FullMethodName      = "/url_shortener.URLShortenerV1/Ping"
	URLShortenerV1_CreateURL_FullMethodName = "/url_shortener.URLShortenerV1/CreateURL"
)

// URLShortenerV1Client is the client API for URLShortenerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerV1Client interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error)
}

type uRLShortenerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerV1Client(cc grpc.ClientConnInterface) URLShortenerV1Client {
	return &uRLShortenerV1Client{cc}
}

func (c *uRLShortenerV1Client) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, URLShortenerV1_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerV1Client) CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error) {
	out := new(CreateURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerV1_CreateURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerV1Server is the server API for URLShortenerV1 service.
// All implementations must embed UnimplementedURLShortenerV1Server
// for forward compatibility
type URLShortenerV1Server interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error)
	mustEmbedUnimplementedURLShortenerV1Server()
}

// UnimplementedURLShortenerV1Server must be embedded to have forward compatible implementations.
type UnimplementedURLShortenerV1Server struct {
}

func (UnimplementedURLShortenerV1Server) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedURLShortenerV1Server) CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedURLShortenerV1Server) mustEmbedUnimplementedURLShortenerV1Server() {}

// UnsafeURLShortenerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerV1Server will
// result in compilation errors.
type UnsafeURLShortenerV1Server interface {
	mustEmbedUnimplementedURLShortenerV1Server()
}

func RegisterURLShortenerV1Server(s grpc.ServiceRegistrar, srv URLShortenerV1Server) {
	s.RegisterService(&URLShortenerV1_ServiceDesc, srv)
}

func _URLShortenerV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerV1Server).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerV1_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerV1Server).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerV1_CreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerV1Server).CreateURL(ctx, req.(*CreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortenerV1_ServiceDesc is the grpc.ServiceDesc for URLShortenerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortenerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shortener.URLShortenerV1",
	HandlerType: (*URLShortenerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _URLShortenerV1_Ping_Handler,
		},
		{
			MethodName: "CreateURL",
			Handler:    _URLShortenerV1_CreateURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url_shortener_v1.proto",
}
