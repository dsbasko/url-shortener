// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsbasko/yandex-go-shortener/internal/service/urls (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/provider.go -package=mock_urls github.com/dsbasko/yandex-go-shortener/internal/service/urls Provider
//

// Package mock_urls is a generated GoMock package.
package mock_urls

import (
	context "context"
	reflect "reflect"

	entity "github.com/dsbasko/yandex-go-shortener/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetURLByOriginalURL mocks base method.
func (m *MockProvider) GetURLByOriginalURL(arg0 context.Context, arg1 string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByOriginalURL", arg0, arg1)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByOriginalURL indicates an expected call of GetURLByOriginalURL.
func (mr *MockProviderMockRecorder) GetURLByOriginalURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByOriginalURL", reflect.TypeOf((*MockProvider)(nil).GetURLByOriginalURL), arg0, arg1)
}

// GetURLByShortURL mocks base method.
func (m *MockProvider) GetURLByShortURL(arg0 context.Context, arg1 string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortURL", arg0, arg1)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByShortURL indicates an expected call of GetURLByShortURL.
func (mr *MockProviderMockRecorder) GetURLByShortURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortURL", reflect.TypeOf((*MockProvider)(nil).GetURLByShortURL), arg0, arg1)
}

// GetURLsByUserID mocks base method.
func (m *MockProvider) GetURLsByUserID(arg0 context.Context, arg1 string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockProviderMockRecorder) GetURLsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockProvider)(nil).GetURLsByUserID), arg0, arg1)
}
